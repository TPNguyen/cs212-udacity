Notes for Desigh of Computer Programs course in Python from Udacity cs212


Define a Poker Program


A card has a rank and a suit eg. 3 of Diamonds or 3D
hand = 5 cards
hands is a list of hand eg. [hand1, hand2, ..]
poker(hands) -> hand # function poker returns the best hand


Hand rank concept:
n-kind 22  33  888
straight 56789
flush 	 5 diamonds or 5 hearts etc

Order of ranks from highest to lowest:
8 - Straight and Flush
7 - Four of a kind
6 - Full House (3 kinds and 2 kinds)
5 - Flush
4 - Straight
3 - Three of a kind
2 - Two 2 of a kinds
1 - Two of a kind
0 - Nothing

'--23456789TJQKA'.index(r) : Returns a number from 2 to 14 for any rank r.

<List>.count(<element>) : Returns the no. of times the element is present in the list.

To find no. of unique elements in a list, convert it to a set and then check its length : len(set(<List>))

To create a list from a part of another list, use something like: 
List1 = [a.some_function() for a,b in List2] 

Combine if statement with return:
return a if <condition> else b


List comprehensions:

udacity_tas = ['Peter', 'Andy', 'Sarah', 'Job', 'Sean', 'Parker']
uppercase_tas = [name.upper() for name in udacity_tas]

This is possible for all iterable objects: strings, lists, tuples


Multiple values can be unpacked and combined with if statement like below:

ta_data = [('Peter', 'Australia', 'CS101'),
	  ('Andy', 'Brazil', 'CS212'),
	  ('Sarah', 'England', 'CS375'),
	  ('Job', 'Germany', 'CS301'),
	  ('Sean', 'France', 'CS251'),
	  ('Parker', 'USA', 'CS153')]

ta_facts = [name + ' from ' + country + ' is the TA for ' + course for name, country, course in ta_data if course.find('CS3') != -1]


defaultdict :

Using list as the default_factory, it is easy to group a sequence of key-value pairs into a dictionary of lists:

>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
>>> d = defaultdict(list)
>>> for k, v in s:
...     d[k].append(v)
...
>>> d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]


int as default_factory is useful for counting (like a bag or multiset in other languages):

>>> s = 'mississippi'
>>> d = defaultdict(int)
>>> for k in s:
...     d[k] += 1
... 
>>> d.items()	
[('i', 4), ('p', 2), ('s', 4), ('m', 1)]


Functions are of 'computing' type and 'doing' type. 
Computing fns: sine, sqrt  
	       Take input and return an output like mathematical fns.
	       Easier to use and test. Should be preffered.
	       sorted([3,2,1]) == [1,2,3]

'Doing' type: shuffle()
	      Modify the input. Takes more code - setup the state, call the subroutine or method, and inspect the state (assert statement)
	      input = [3,2,1]
	      input.sort()
	      input == [1,2,3]